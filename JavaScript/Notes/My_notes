Javascript is a high level programming language that makes up core of what the web is and how it
functions.To understand the language you must know its syntax from its data types, variables to
more complex components as in functions and objects.

Javascript Variables

To declare a variable in JavaScript you need to make use of the 'var' keyword followed by the
name of the variable. A variable is the name we use to hold the data we will refer to later in
our code when its time to use the data.

    var my_var1;

The above example is a typical illustration of how to declare a variable, take note that varibales
in JavaScript can only contain numbers,letters and special characters like underscores and $.
A variable name under no circumstances should ever begin with a number or a special character other
than an underscore.

JavaScript Data types

JavaScript supports 8 different data types:
    -boolean
    -null
    -string
    -bigint
    -undefined
    -symbol
    -number
    -object

Storing Values with the Assignment Operator

We use the assignment operator(=) to store data into our variable.Take note the data to the right
of the assignment operator is always resolved first before storing the data in the variable that is
to the left of the assignment operator.Below is an example of assigning values to a variable.

    var x;
    var y=8;

    x=2
    y=x;
Although y has its own value of 8, it is later overridden to the same value as x which is 2.
In JavaScript a variable that is declared but has no value/data assigned to it is regarded as an
undefined variable.If you perform an arithmetic operation on an undefined variable the answer will be
"NaN" which means Not a Number. If you concatenate a string with an undefined variable then the result
will be a literal string of "undefined".

Understanding Case Sensitivity in Variables

It is important to note that the way in which you write out your variable names is important.JavaScript
is case sensitive which means you can have distinct variables but have them use the same words however the casing
used makes them distinct:

    var mY_VAR1;
    var MY_vAr1;
    var my_VaR1;

The above variables all use the word "var1" but javascript interprets each differently because of casing used.
So  we have 3 distinct variables each using a unique casing to differentiate it.To avoid this problem it is
considered best JavaScript practice to use camelcase when defining you variable names:

camelCase is a type of casing whereby we have a multiple word variable and the first word of the variable name
is in lowercase and the subsequent word after that have each of their first letter capitalized and the rest of their
letters in smallcase e.g:

    var postalAddress;
    var blockChainCommand;
    var pointOfOrigin;

Finding a Remainder in JavaScript
The remainder operator % gives the remainder of the division of two numbers.
    5 % 2 = 1 because
    Math.floor(5 / 2) = 2 (Quotient)
    2 * 2 = 4
    5 - 4 = 1 (Remainder)
Usage
In mathematics, a number can be checked to be even or odd by
checking the remainder of the division of the number by 2.
The remainder operator is sometimes incorrectly referred to as the "modulus" operator.
It is very similar to modulus, but does not work properly with negative numbers.

Compound Assignment With Augmented Addition,subtraction,division and multiplication

In programming, it is common to use assignments to modify the contents of a variable.
Remember that everything to the right of the equals sign is evaluated first, so we can say:

    myVar = myVar + 5;

to add 5 to myVar. Since this is such a common pattern, there are operators which do both a
mathematical operation and assignment in one step.

One such operator is the += operator.as well as *=, /= , -=.

Escaping Literal Quotes in Strings

When you are defining a string you must start and end with a single or double quote. What happens when you need a literal quote: " or ' inside of your string?
In JavaScript, you can escape a quote from considering it as an end of string quote by placing a backslash (\) in front of the quote.

    var sampleStr = "Alan said, \"Peter is learning JavaScript\".";

string values in JavaScript may be written with single or double quotes, as long as you start and end with the same type of quote
unlike some other programming languages, single and double quotes work the same in JavaScript.
    doubleQuoteStr = "This is a string";
    singleQuoteStr = 'This is also a string';

The reason why you might want to use one type of quote over the other is if you want to use both in a string. This might happen if you want to save a conversation in a string and have the conversation in quotes.
Another use for it would be saving an <a> tag with various attributes in quotes, all within a string e.g.

    var myStr = '<a href="http://www.example.com" target="_blank">Link</a>';

However, this becomes a problem if you need to use the outermost quotes within it. Remember, a string has the same kind of quote at the beginning and end.
But if you have that same quote somewhere in the middle, the string will stop early and throw an error.

    goodStr = 'Jake asks Finn, "Hey, let\'s go on an adventure?"';
    badStr = 'Finn responds, "Let's go!"'; // Throws an error

Escape Sequences in Strings

Escape sequence in strings help us to represent characters we may not want to write out within a string literal
by using escape sequences to represent those character.The following are examples of common escape sequences used
in JavaScript:
    Code	Output
    \'	single quote
    \"	double quote
    \\	backslash
    \n	newline
    \r	carriage return
    \t	tab
    \b	word boundary
    \f	form feed
To show how the escape sequences work take for example the string below:

    var myString= "FirstSecondLineThirdLine";
To make the string above appear similar to the string output below:

    FirstLine
        SecondLine
    ThirdLine
We need to use escape sequence characters, the following is an illustration of how we can achieve this:

    var myString= "FirstLine \n \t SecondLine \n ThirdLine";

Concatenating Strings with Plus Operator

In JavaScript, when the + operator is used with a String value, it is called the concatenation operator.
You can build a new string out of other strings by concatenating them together.

We can also use the += operator to concatenate a string onto the end of an existing string variable.
This can be very helpful to break a long string over several lines.

    var ourStr = "I come first. ";
    ourStr += "I come second.";

Appending Variables to Strings

Just as we can build a string over multiple lines out of string literals, we can also append variables to a string using the plus equals (+=) operator.
Example:

    var anAdjective = "awesome!";
    var ourStr = "freeCodeCamp is ";
    ourStr += anAdjective;

Find the Length of a String

You can find the length of a String value by writing .length after the string variable or string literal.

        "Alan Peter".length; // 10

For example, if we created a variable var firstName = "Charles", we could find out how long the string "Charles" is by using the firstName.length property

Use Bracket Notation to Find the First Character in a String

Most modern programming languages, like JavaScript, don't start counting at 1 like humans do.
They start at 0. This is referred to as Zero-based indexing.
Example:

        var firstName = "Charles";
        var firstLetter = firstName[0]; // firstLetter is "C"

Understand String Immutability

In JavaScript, String values are immutable, which means that they cannot be altered once created.
For example, the following code:

        var myStr = "Bob";
        myStr[0] = "J";

cannot change the value of myStr to "Job", because the contents of myStr cannot be altered.
Note that this does not mean that myStr cannot be changed, just that the individual characters of a string literal cannot be changed.
The only way to change myStr would be to assign it with a new string, like this:

        var myStr = "Bob";
        myStr = "Job";
In short you cannot change a Javascript string literal by altering a portion of it , you will need to re-assign
another string literal into the variable , so changing the whole string literal is the only way to alter it.

Use Bracket Notation to Find the Nth Character in a String

You can also use bracket notation to get the character at other positions within a string.
Remember that computers start counting at 0, so the first character is actually the zeroth character.

Use Bracket Notation to Find the Last Character in a String

In order to get the last letter of a string, you can subtract one from the string's length.

For example, if var firstName = "Charles", you can get the value of the last letter of the string
by using firstName[firstName.length - 1].
Example:

        var firstName = "Charles";
        var lastLetter = firstName[firstName.length - 1];

Use Bracket Notation to Find the Nth-to-Last Character in a String

You can use the same principle we just used to retrieve the last character in a string to retrieve the Nth-to-last character.
For example, you can get the value of the third-to-last letter
of the var firstName = "Charles" string by using firstName[firstName.length - 3]

Store Multiple Values in one Variable using JavaScript Arrays

With JavaScript array variables, we can store several pieces of data in one place.
You start an array declaration with an opening square bracket, end it with a closing square bracket, and put a comma between each entry, like this:

    var sandwich = ["peanut butter", "jelly", "bread"].

Nest one Array within Another Array

You can also nest arrays within other arrays, like below:

        [["Bulls", 23], ["White Sox", 45]] //This is called a multidimensional Array

Access Array Data with Indexes

We can access the data inside arrays using indexes.

Array indexes are written in the same bracket notation that strings use, except that instead of specifying a character, they are specifying an entry in the array.
Like strings, arrays use zero-based indexing, so the first element in an array has an index of 0.
Example:
    var array = [50,60,70];
    array[0]; // equals 50
    var data = array[1];  // equals 60

Modify Array Data With Indexes

Unlike strings, the entries of arrays are mutable and can be changed freely.
Example:
    var ourArray = [50,40,30];
    ourArray[0] = 15; // equals [15,40,30]

Access Multi-Dimensional Arrays With Indexes
One way to think of a multi-dimensional array, is as an array of arrays. When you use brackets to access your array, the first set of brackets refers to the entries in the outer-most (the first level) array,
and each additional pair of brackets refers to the next level of entries inside.
Example:
    var arr = [
      [1,2,3],
      [4,5,6],
      [7,8,9],
      [[10,11,12], 13, 14]
    ];
    arr[3]; // equals [[10,11,12], 13, 14]
    arr[3][0]; // equals [10,11,12]
    arr[3][0][1]; // equals 11

Manipulate Arrays With push()
An easy way to append data to the end of an array is via the push() function.
.push() takes one or more parameters and "pushes" them onto the end of the array.
Examples:
        var arr1 = [1,2,3];
        arr1.push(4);
        // arr1 is now [1,2,3,4]

        var arr2 = ["Stimpson", "J", "cat"];
        arr2.push(["happy", "joy"]);
        // arr2 now equals ["Stimpson", "J", "cat", ["happy", "joy"]]

Manipulate Arrays With pop()
Another way to change the data in an array is with the .pop() function.
.pop() is used to "pop" a value off of the end of an array. We can store this "popped off" value by assigning it to a variable. In other words, .pop() removes the last element from an array and returns that element.
Any type of entry can be "popped" off of an array - numbers, strings, even nested arrays.

        var threeArr = [1, 4, 6];
        var oneDown = threeArr.pop();
        console.log(oneDown); // Returns 6
        console.log(threeArr); // Returns [1, 4]

Manipulate Arrays With shift()
pop() always removes the last element of an array. What if you want to remove the first?
That's where .shift() comes in. It works just like .pop(), except it removes the first element instead of the last.
Example:

    var ourArray = ["Stimpson", "J", ["cat"]];
    var removedFromOurArray = ourArray.shift();

Manipulate Arrays With unshift()
Not only can you shift elements off of the beginning of an array, you can also unshift elements to the beginning of an array i.e. add elements in front of the array.
.unshift() works exactly like .push(), but instead of adding the element at the end of the array, unshift() adds the element at the beginning of the array.
Example:
    var ourArray = ["Stimpson", "J", "cat"];
    ourArray.shift(); // ourArray now equals ["J", "cat"]
    ourArray.unshift("Happy");
    // ourArray now equals ["Happy", "J", "cat"]

Write Reusable JavaScript with Functions
In JavaScript, we can divide up our code into reusable parts called functions.
Here's an example of a function:

    function functionName() {
      console.log("Hello World");
    }
You can call or invoke this function by using its name followed by parentheses,
like this: functionName(); Each time the function is called it will print out the message "Hello World" on the dev console.
All of the code between the curly braces will be executed every time the function is called.

Passing Values to Functions with Arguments
Parameters are variables that act as placeholders for the values that are to be input to a
function when it is called. When a function is defined, it is typically defined along with one or more parameters.
The actual values that are input (or "passed") into a function when it is called are known as arguments.
Here is a function with two parameters, param1 and param2:

        function testFun(param1, param2) {
          console.log(param1, param2);
        }
Then we can call testFun: testFun("Hello", "World"); We have passed two arguments, "Hello" and "World".
Inside the function, param1 will equal "Hello" and param2 will equal "World".
Note that you could call testFun again with different arguments and the parameters would take on the value of the new arguments.

Global Scope and Functions
In JavaScript, scope refers to the visibility of variables.
Variables which are defined outside of a function block have Global scope.
This means, they can be seen everywhere in your JavaScript code.
Variables which are used without the var keyword are automatically created in the global scope.
This can create unintended consequences elsewhere in your code or when running a function again.
You should always declare your variables with var.

Local Scope and Functions
Variables which are declared within a function, as well as the function parameters have local scope.
That means, they are only visible within that function.
Here is a function myTest with a local variable called loc:
    function myTest() {
      var loc = "foo";
      console.log(loc);
    }
    myTest(); // logs "foo"
    console.log(loc); // loc is not defined

Global vs. Local Scope in Functions
It is possible to have both local and global variables with the same name.
When you do this, the local variable takes precedence over the global variable.
In this example:
        var someVar = "Hat";
        function myFun() {
          var someVar = "Head";
          return someVar;
        }
The function myFun will return "Head" because the local version of the variable is present.

Return a Value from a Function with Return
We can pass values into a function with arguments.
You can use a return statement to send a value back out of a function.
Example:
        function plusThree(num) {
          return num + 3;
        }
        var answer = plusThree(5); // 8
plusThree takes an argument for num and returns a value equal to num + 3.

Understanding Undefined Value returned from a Function
A function can include the return statement but it does not have to.
In the case that the function doesn't have a return statement, when you call it, the function processes the inner code but the returned value is undefined.
Example:
        var sum = 0;
        function addSum(num) {
          sum = sum + num;
        }
        addSum(3);
addSum is a function without a return statement.
The function will change the global sum variable but the returned value of the function is undefined.

Assignment with a Returned Value
If you'll recall from our discussion of Storing Values with the Assignment Operator, everything to the right of the equal sign is resolved before the value is assigned.
This means we can take the return value of a function and assign it to a variable.
Assume we have pre-defined a function sum which adds two numbers together, then:

        ourSum = sum(5, 12);

will call sum function, which returns a value of 17 and assigns it to ourSum variable.

Stand in Line
In Computer Science a queue is an abstract Data Structure where items are kept in order.
New items can be added at the back of the queue and old items are taken off from the front of the queue.

Understanding Boolean Values
Another data type is the Boolean. Booleans may only be one of two values: true or false.
They are basically little on-off switches, where true is "on" and false is "off."
These two states are mutually exclusive.