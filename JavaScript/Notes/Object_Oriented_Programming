Introduction To Object Oriented Programming

Object Oriented Programming is a programming paradigm/model that organizes software design around data or objects,rather
than on logic and functions.An object can be defined as a data field that has unique behaviour and attributes.
Object Oriented programming focuses on objects that developers want to manipulate rather than the logic required to
manipulate them.

Object Oriented Programming is well suited for programs that are large,complex and are actively being maintained or updated.
The Organization of an oo program adds the benefit of collaborative development in cases where projects are divided into groups.
There are other benefits to OOP and these are: code reusability,scalability and effciency.

The first step when designing an oo program is to collect all objects that the developer wants to manipulate and then identify
how those objects relate to one another, this process is known as data modeling. Examples of an object can range from physical entities, such as a human being who is described by name,address,age etc.

OOP is based on 4 principles that we will work through each through a series of solving challenges on freeCode Camp:

	1.Encapsulation: The implementation and state of each object are privately held inside a defined boundary, or class. Other objects do not have access to this class or the authority to make changes but are only able to call a list of public functions, or methods. This characteristic of data hiding provides greater program security and avoids unintended data corruption.

	2.Abstraction:Objects only reveal internal mechanisms that are relevant for the use of other objects, hiding any unnecessary implementation code. This concept helps developers more easily make changes and additions over time.

	3.Inheritance: Relationships and subclasses between objects can be assigned, allowing developers to reuse a common logic while still maintaining a unique hierarchy. This property of OOP forces a more thorough data analysis, reduces development time and ensures a higher level of accuracy

	4.Polymorphism:Objects can take on more than one form depending on the context. The program will determine which meaning or usage is necessary for each execution of that object, cutting down the need to duplicate code.


Although it has many benefits that comes with it OOP has been criticized by other developers for putting more focus on organizing 
software design around data rather than focus more on computation and algorithms. OOP can be quite difficult to write and even puts more burden on computation, thus other alternative methods to OOP that have been proposed are:
	
	1.Functional Programming
	2.Structured Programming
	3.Imperative Programming


Define a Constructor Function
Constructors are functions that create new objects. They define properties and behaviors that will belong to the new object. Think of them as a blueprint for the creation of new objects.

Here is an example of a constructor:

function Bird() {
  this.name = "Albert";
  this.color = "blue";
  this.numLegs = 2;
}
This constructor defines a Bird object with properties name, color, and numLegs set to Albert, blue, and 2, respectively. Constructors follow a few conventions:

	1.Constructors are defined with a capitalized name to distinguish them from other functions that are not constructors.
	2.Constructors use the keyword this to set properties of the object they will create. Inside the constructor, this refers to the new object it will create.
	3.Constructors define properties and behaviors instead of returning a value as other functions might.


Extend Constructor to Recieve Arguments
The Bird and Dog constructors from last challenge worked well. However, notice that all Birds that are created with the Bird constructor are automatically named Albert, are blue in color, and have two legs. What if you want birds with different values for name and color? It's possible to change the properties of each bird manually but that would be a lot of work:

	let swan = new Bird();
	swan.name = "Carlos";
	swan.color = "white";

Suppose you were writing a program to keep track of hundreds or even thousands of different birds in an aviary. It would take a lot of time to create all the birds, then change the properties to different values for every one. To more easily create different Bird objects, you can design your Bird constructor to accept parameters:

	function Bird(name, color) {
	  this.name = name;
	  this.color = color;
	  this.numLegs = 2;
	}

Then pass in the values as arguments to define each unique bird into the Bird constructor: let cardinal = new Bird("Bruce", "red"); This gives a new instance of Bird with name and color properties set to Bruce and red, respectively. The numLegs property is still set to 2. The cardinal has these properties:

	cardinal.name // => Bruce
	cardinal.color // => red
	cardinal.numLegs // => 2
	
The constructor is more flexible. It's now possible to define the properties for each Bird at the time it is created, which is one way that JavaScript constructors are so useful. They group objects together based on shared characteristics and behavior and define a blueprint that automates their creation.