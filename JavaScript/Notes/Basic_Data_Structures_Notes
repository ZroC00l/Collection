Introduction to Basic Data Structures
This section will focus on manipulating data stored inside an array and objects, how to access the data, copy it
and modify it inside the data structure.By the end of this section you should be able to tell when to apply
each data structure in given scenarios.


Basic Array manipulations
An array in javascript is a powerful data structure to behold, as it can shrink or grow to the coder's needs.
arrays in javascript are capable of holding data of different types, the following is an example of an array
that nests arrays of different data types:

        let super_array=[

            ["Java","C++","JavaScript"],
            [2006,2007,2008,2013],
            null,
            undefined,
            {
                Age:24,
                Name:"Uncle Groovey",
                height:"5ft5inch"
            },
            [
                {
                   colour:"red",
                   pet:"dog"
                },
                {
                   artist:"2pac",
                   music:"Rap/hip-hop"
                }
            ]

        ];
In addition to being able to hold a myriad of data types, javaScript arrays have built in functions
we can use to modify the contents of the array the following are some of the common methods that are used
in array manipulation:
                -push() appends an element at the end of the array
                -pop()  removes the last element in the array
                -shift() removes an element in the first index of the array
                -unshift adds an element to the the first index of the array
                -splice() removes elements from an array at specified range, it takes in 2 parameters usually
                but it can take up to 3, the first number is the index where to begin removing and the second number
                is the number of elements to remove from the starting position.Note Splice not only removes those
                elements from the array it also returns a new array of those removed elements.
                -slice() is another array method which is used to copy the contents of an array over a given
                range, it takes 2 parameter numbers, the first number is the starting point and the second
                is the ending point, unlike splice this method copies the array elements over the specified
                range and leaves the initial array untouched , it performs a copy only.

we mentioned that splice() can take up to three parameters? Well, you can use the third parameter, comprised
of one or more element(s), to add to the array. This can be incredibly useful for quickly switching out
an element, or a set of elements, for another.

                    const numbers = [10, 11, 12, 12, 15];
                    const startIndex = 3;
                    const amountToDelete = 1;

                    numbers.splice(startIndex, amountToDelete, 13, 14);
                    // the second entry of 12 is removed, and we add 13 and 14 at the same index
                    console.log(numbers);
                    // returns [ 10, 11, 12, 13, 14, 15 ]

The following is an example of working with the slice() method
                    let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];

                    let todaysWeather = weatherConditions.slice(1, 3);
                    // todaysWeather equals ['snow', 'sleet'];
                    // weatherConditions still equals ['rain', 'snow', 'sleet', 'hail', 'clear']

Copy an Array with the Spread Operator
While slice() allows us to be selective about what elements of an array to copy, among several other useful
tasks, ES6's new spread operator allows us to easily copy all of an array's elements, in order, with a
simple and highly readable syntax. The spread syntax simply looks like this: ...
In practice, we can use the spread operator to copy an array like so:

                    let thisArray = [true, true, undefined, false, null];
                    let thatArray = [...thisArray];
                    // thatArray equals [true, true, undefined, false, null]
                    // thisArray remains unchanged, and is identical to thatArray

CopyMachine which takes arr (an array) and num (a number) as arguments. The function is supposed to
return a new array made up of num copies of arr. We have done most of the work for you, but it doesn't
work quite right yet.
                function copyMachine(arr, num) {
                  let newArr = [];
                  while (num >= 1) {
                    // Only change code below this line
                    newArr.push([...arr]);
                    // Only change code above this line
                    num--;
                  }
                  return newArr;
                }

                console.log(copyMachine([1, 2, 2], 2));// Output will be [[1,2,3],[1,2,3]]

Combine Arrays with the Spread Operator
Another huge advantage of the spread operator, is the ability to combine arrays, or to insert all the
elements of one array into another, at any index. With more traditional syntaxes, we can concatenate
arrays, but this only allows us to combine arrays at the end of one, and at the start of another.
Spread syntax makes the following operation extremely simple:

                let thisArray = ['sage', 'rosemary', 'parsley', 'thyme'];

                let thatArray = ['basil', 'cilantro', ...thisArray, 'coriander'];
// thatArray now equals ['basil', 'cilantro', 'sage', 'rosemary', 'parsley', 'thyme', 'coriander']
Using spread syntax, we have just achieved an operation that would have been more complex and more
verbose had we used traditional methods.


Check For The Presence of an Element With indexOf()
Since arrays can be changed, or mutated, at any time, there's no guarantee about where a particular piece
of data will be on a given array, or if that element even still exists. Luckily, JavaScript provides us
with another built-in method, indexOf(), that allows us to quickly and easily check for the presence of
an element on an array. indexOf() takes an element as a parameter, and when called, it returns the
position, or index, of that element, or -1 if the element does not exist on the array.
For example:

                let fruits = ['apples', 'pears', 'oranges', 'peaches', 'pears'];

                fruits.indexOf('dates'); // returns -1
                fruits.indexOf('oranges'); // returns 2
                fruits.indexOf('pears'); // returns 1, the first index at which the element exists
indexOf() can be incredibly useful for quickly checking for the presence of an element on an array.