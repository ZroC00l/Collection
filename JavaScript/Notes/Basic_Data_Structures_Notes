Introduction to Basic Data Structures
This section will focus on manipulating data stored inside an array and objects, how to access the data, copy it
and modify it inside the data structure.By the end of this section you should be able to tell when to apply
each data structure in given scenarios.


Basic Array manipulations
An array in javascript is a powerful data structure to behold, as it can shrink or grow to the coder's needs.
arrays in javascript are capable of holding data of different types, the following is an example of an array
that nests arrays of different data types:

        let super_array=[

            ["Java","C++","JavaScript"],
            [2006,2007,2008,2013],
            null,
            undefined,
            {
                Age:24,
                Name:"Uncle Groovey",
                height:"5ft5inch"
            },
            [
                {
                   colour:"red",
                   pet:"dog"
                },
                {
                   artist:"2pac",
                   music:"Rap/hip-hop"
                }
            ]

        ];
In addition to being able to hold a myriad of data types, javaScript arrays have built in functions
we can use to modify the contents of the array the following are some of the common methods that are used
in array manipulation:
                -push() appends an element at the end of the array
                -pop()  removes the last element in the array
                -shift() removes an element in the first index of the array
                -unshift adds an element to the the first index of the array
                -splice() removes elements from an array at specified range, it takes in 2 parameters usually
                but it can take up to 3, the first number is the index where to begin removing and the second number
                is the number of elements to remove from the starting position.Note Splice not only removes those
                elements from the array it also returns a new array of those removed elements.
                -slice() is another array method which is used to copy the contents of an array over a given
                range, it takes 2 parameter numbers, the first number is the starting point and the second
                is the ending point, unlike splice this method copies the array elements over the specified
                range and leaves the initial array untouched , it performs a copy only.

we mentioned that splice() can take up to three parameters? Well, you can use the third parameter, comprised
of one or more element(s), to add to the array. This can be incredibly useful for quickly switching out
an element, or a set of elements, for another.

                    const numbers = [10, 11, 12, 12, 15];
                    const startIndex = 3;
                    const amountToDelete = 1;

                    numbers.splice(startIndex, amountToDelete, 13, 14);
                    // the second entry of 12 is removed, and we add 13 and 14 at the same index
                    console.log(numbers);
                    // returns [ 10, 11, 12, 13, 14, 15 ]

The following is an example of working with the slice() method
                    let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];

                    let todaysWeather = weatherConditions.slice(1, 3);
                    // todaysWeather equals ['snow', 'sleet'];
                    // weatherConditions still equals ['rain', 'snow', 'sleet', 'hail', 'clear']

Copy an Array with the Spread Operator
While slice() allows us to be selective about what elements of an array to copy, among several other useful
tasks, ES6's new spread operator allows us to easily copy all of an array's elements, in order, with a
simple and highly readable syntax. The spread syntax simply looks like this: ...
In practice, we can use the spread operator to copy an array like so:

                    let thisArray = [true, true, undefined, false, null];
                    let thatArray = [...thisArray];
                    // thatArray equals [true, true, undefined, false, null]
                    // thisArray remains unchanged, and is identical to thatArray

CopyMachine which takes arr (an array) and num (a number) as arguments. The function is supposed to
return a new array made up of num copies of arr. We have done most of the work for you, but it doesn't
work quite right yet.
                function copyMachine(arr, num) {
                  let newArr = [];
                  while (num >= 1) {
                    // Only change code below this line
                    newArr.push([...arr]);
                    // Only change code above this line
                    num--;
                  }
                  return newArr;
                }

                console.log(copyMachine([1, 2, 2], 2));// Output will be [[1,2,3],[1,2,3]]

Combine Arrays with the Spread Operator
Another huge advantage of the spread operator, is the ability to combine arrays, or to insert all the
elements of one array into another, at any index. With more traditional syntaxes, we can concatenate
arrays, but this only allows us to combine arrays at the end of one, and at the start of another.
Spread syntax makes the following operation extremely simple:

                let thisArray = ['sage', 'rosemary', 'parsley', 'thyme'];

                let thatArray = ['basil', 'cilantro', ...thisArray, 'coriander'];
// thatArray now equals ['basil', 'cilantro', 'sage', 'rosemary', 'parsley', 'thyme', 'coriander']
Using spread syntax, we have just achieved an operation that would have been more complex and more
verbose had we used traditional methods.


Check For The Presence of an Element With indexOf()
Since arrays can be changed, or mutated, at any time, there's no guarantee about where a particular piece
of data will be on a given array, or if that element even still exists. Luckily, JavaScript provides us
with another built-in method, indexOf(), that allows us to quickly and easily check for the presence of
an element on an array. indexOf() takes an element as a parameter, and when called, it returns the
position, or index, of that element, or -1 if the element does not exist on the array.
For example:

                let fruits = ['apples', 'pears', 'oranges', 'peaches', 'pears'];

                fruits.indexOf('dates'); // returns -1
                fruits.indexOf('oranges'); // returns 2
                fruits.indexOf('pears'); // returns 1, the first index at which the element exists
indexOf() can be incredibly useful for quickly checking for the presence of an element on an array.



Iterate Through All an Array's Items Using For Loops
Sometimes when working with arrays, it is very handy to be able to iterate through each item to find one or
more elements that we might need, or to manipulate an array based on which data items meet a certain set of
criteria. JavaScript offers several built in methods that each iterate over arrays in slightly different
ways to achieve different results (such as every(), forEach(), map(), etc.), however the technique which
is most flexible and offers us the greatest amount of control is a simple for loop.

The following is an example of using a for loop to iterate an array,the function takes arr as an arugment
and elem as the number to search for in each nested array, if an any nested array has the elem , that
nested array is removed and any subarray found to have any element other than the argument elem that
subarray will be pushed into a new array which will be returned.

                function filteredArray(arr, elem) {
                  let newArr = [];
                  // Only change code below this line
                  for(let i=0;i<arr.length;i++){
                        if(arr[i].indexOf(elem)=== -1){
                          newArr.push(arr[i]);

                    }
                  }
                  // Only change code above this line
                  return newArr;
                }

                console.log(filteredArray([[3, 2, 3], [1, 6, 3], [2, 13, 26], [19, 3, 9]], 3));
                //the output will be [[2,13,16]]



Create complex multi-dimensional arrays
Awesome! You have just learned a ton about arrays! This has been a fairly high level overview, and there
is plenty more to learn about working with arrays, much of which you will see in later sections.
But before moving on to looking at Objects, lets take one more look, and see how arrays can become a
bit more complex than what we have seen in previous challenges.

One of the most powerful features when thinking of arrays as data structures, is that arrays can contain,
or even be completely made up of other arrays. We have seen arrays that contain arrays in previous
challenges, but fairly simple ones. However, arrays can contain an infinite depth of arrays that can
contain other arrays, each with their own arbitrary levels of depth, and so on. In this way, an array
can very quickly become very complex data structure, known as a multi-dimensional, or nested array.
Consider the following example:
We have defined a variable, myNestedArray, set equal to an array. Modify myNestedArray, using any
combination of strings, numbers, and booleans for data elements, so that it has exactly five levels of
depth (remember, the outer-most array is level 1). Somewhere on the third level, include the string
'deep', on the fourth level, include the string 'deeper', and on the fifth level, include the string
'deepest': (Solution)

                    let myNestedArray = [
                      // Only change code below this line
                      ['unshift', false, 1, 2, 3, 'complex', 'nested'],
                      ['loop', 'shift', 6, 7, 1000, 'method'],
                      ['concat', false, true, 'spread', 'array',['deep']],
                      ['mutate', 1327.98, 'splice', 'slice', 'push',
                      [
                          ['deeper'],
                            [
                              [
                                'deepest'
                              ]
                            ]
                      ]
                      ],
                      ['iterate', 1.3849, 7, '8.4876', 'arbitrary', 'depth']
                      // Only change code above this line
                    ];



Add Key-Value Pairs to JavaScript Objects
At their most basic, objects are just collections of key-value pairs. In other words, they are pieces
of data (values) mapped to unique identifiers called properties (keys).We can add properties of an
object using two notations: dot notation or bracket notation, bracket notation is mostly used when the
property name we are adding has a space in it:

                    const person={

                        Name: "Uncle Groovey",
                        Age:24,
                        height:"5ft5inch"

                    };
                    //adds property race using dot notation and gives it a property value of African
                    person.race="African";
                    //adds property language using the bracket notation and gives it a property value of English
                    person["language"]="English;
                    //Since the property name has spaces the only way  to add this prop to an object is to use bracket notation
                    person["Country of Origin"]="South-Africa";


Modify an Object Nested Within an Object
Now let's take a look at a slightly more complex object. Object properties can be nested to an arbitrary
depth, and their values can be any type of data supported by JavaScript, including arrays
and even other objects
Here we've defined an object userActivity, which includes another object nested within it. Set the value
of the online key to 45:
                    let userActivity = {
                      id: 23894201352,
                      date: 'January 1, 2017',
                      data: {
                        totalUsers: 51,
                        online: 42
                      }
                    };

                    // Only change code below this line
                    userActivity.data.online=45;
                    // Only change code above this line

                    console.log(userActivity);

Access Property Names with Bracket Notation
In the first object challenge we mentioned the use of bracket notation as a way to access property values
using the evaluation of a variable. For instance, imagine that our foods object is being used in
a program for a supermarket cash register. We have some function that sets the selectedFood and
we want to check our foods object for the presence of that food. This might look like:

                    let selectedFood = getCurrentFood(scannedItem);
                    let inventory = foods[selectedFood];
This code will evaluate the value stored in the selectedFood variable and return the value of that key in
the foods object, or undefined if it is not present. Bracket notation is very useful because sometimes
object properties are not known before runtime or we need to access them in a more dynamic way.
We've defined a function, checkInventory, which receives a scanned item as an argument.
Return the current value of the scannedItem key in the foods object. You can assume that only valid
keys will be provided as an argument to checkInventory.


                    let foods = {
                      apples: 25,
                      oranges: 32,
                      plums: 28,
                      bananas: 13,
                      grapes: 35,
                      strawberries: 27
                    };

                    function checkInventory(scannedItem) {
                      // Only change code below this line
                      return foods[scannedItem];
                      // Only change code above this line
                    }

                    console.log(checkInventory("apples"));



Use the delete Keyword to Remove Object Properties
Now you know what objects are and their basic features and advantages. In short, they are key-value stores
which provide a flexible, intuitive way to structure data, and, they provide very fast lookup time.
Throughout the rest of these challenges, we will describe several common operations you can perform
on objects so you can become comfortable applying these useful data structures in your programs.
In earlier challenges, we have both added to and modified an object's key-value pairs.
Here we will see how we can remove a key-value pair from an object.
Let's revisit our foods object example one last time. If we wanted to remove the apples key,
we can remove it by using the delete keyword like this:

                    delete foods.apples;

Check if an Object has a Property
Now we can add, modify, and remove keys from objects. But what if we just wanted to know if an object
has a specific property? JavaScript provides us with two different ways to do this. One uses the
hasOwnProperty() method and the other uses the in keyword.

We've created an object, users, with some users in it and a function isEveryoneHere, which we pass the
users object to as an argument. Finish writing this function so that it returns true only if the users
object contains all four names, Alan, Jeff, Sarah, and Ryan, as keys, and false otherwise.

                    let users = {
                      Alan: {
                        age: 27,
                        online: true
                      },
                      Jeff: {
                        age: 32,
                        online: true
                      },
                      Sarah: {
                        age: 48,
                        online: true
                      },
                      Ryan: {
                        age: 19,
                        online: true
                      }
                    };

                    function isEveryoneHere(obj) {
                      // Only change code below this line
                     if (
                        obj.hasOwnProperty("Alan") &&
                        obj.hasOwnProperty("Jeff") &&
                        obj.hasOwnProperty("Sarah") &&
                        obj.hasOwnProperty("Ryan")
                      ) {
                        return true;
                      }
                      return false;
                      // Only change code above this line
                    }

                    console.log(isEveryoneHere(users));


Iterate Through the Keys of an Object with a for...in Statement
Sometimes you may need to iterate through all the keys within an object. This requires a specific syntax
in JavaScript called a for...in statement. For our users object, this could look like:

                        for (let user in users) {
                          console.log(user);
                        }

                        // logs:
                        Alan
                        Jeff
                        Sarah
                        Ryan
In this statement, we defined a variable user, and as you can see, this variable was reset during each
iteration to each of the object's keys as the statement looped through the object, resulting in
each user's name being printed to the console. NOTE: Objects do not maintain an ordering to stored
keys like arrays do; thus a key's position on an object, or the relative order in which it appears,
is irrelevant when referencing or accessing that key.
We've defined a function countOnline which accepts one argument (a users object). Use a for...in statement within this function to loop through the users object passed into the function and return the number of users whose online property is set to true. An example of a users object which could be passed to countOnline is shown below. Each user will have an online property with either a true or false value.

                        {
                          Alan: {
                            online: false
                          },
                          Jeff: {
                            online: true
                          },
                          Sarah: {
                            online: false
                          }
                        }
solution:
                         function countOnline(usersObj) {
                           // Only change code below this line
                            let result = 0;
                           for (let user in usersObj) {
                             if (usersObj[user].online === true) {
                               result++;
                             }
                           }
                           return result;

                           // Only change code above this line
                         }


Generate an Array of All Object Keys with Object.keys()
We can also generate an array which contains all the keys stored in an object using the Object.keys()
method and passing in an object as the argument. This will return an array with strings representing
each property in the object. Again, there will be no specific order to the entries in the array.
Example:
                        let users = {
                          Alan: {
                            age: 27,
                            online: false
                          },
                          Jeff: {
                            age: 32,
                            online: true
                          },
                          Sarah: {
                            age: 48,
                            online: false
                          },
                          Ryan: {
                            age: 19,
                            online: true
                          }
                        };

                        function getArrayOfUsers(obj) {
                          // Only change code below this line
                              return Object.keys(obj);
                          // Only change code above this line
                        }

                        console.log(getArrayOfUsers(users));

Modify an Array Stored in an Object
Now you've seen all the basic operations for JavaScript objects. You can add, modify, and remove
key-value pairs, check if keys exist, and iterate over all the keys in an object. As you continue
learning JavaScript you will see even more versatile applications of objects. Additionally, the
Data Structures lessons located in the Coding Interview Prep section of the curriculum also cover the
ES6 Map and Set objects, both of which are similar to ordinary objects but provide some additional
features. Now that you've learned the basics of arrays and objects, you're fully prepared to begin
tackling more complex problems using JavaScript!

Take a look at the object we've provided in the code editor. The user object contains three keys.
The data key contains five keys, one of which contains an array of friends. From this, you can see
how flexible objects are as data structures. We've started writing a function addFriend.
Finish writing it so that it takes a user object and adds the name of the friend argument to
the array stored in user.data.friends and returns that array.Solution:

                        let user = {
                          name: 'Kenneth',
                          age: 28,
                          data: {
                            username: 'kennethCodesAllDay',
                            joinDate: 'March 26, 2016',
                            organization: 'freeCodeCamp',
                            friends: [
                              'Sam',
                              'Kira',
                              'Tomo'
                            ],
                            location: {
                              city: 'San Francisco',
                              state: 'CA',
                              country: 'USA'
                            }
                          }
                        };

                        function addFriend(userObj, friend) {
                          // Only change code below this line
                          userObj["data"]["friends"].push(friend);
                          return userObj.data.friends;
                          // Only change code above this line
                        }

                        console.log(addFriend(user, 'Pete'));

