Introduction to Basic Data Structures
This section will focus on manipulating data stored inside an array and objects, how to access the data, copy it
and modify it inside the data structure.By the end of this section you should be able to tell when to apply
each data structure in given scenarios.


Basic Array manipulations
An array in javascript is a powerful data structure to behold, as it can shrink or grow to the coder's needs.
arrays in javascript are capable of holding data of different types, the following is an example of an array
that nests arrays of different data types:

        let super_array=[

            ["Java","C++","JavaScript"],
            [2006,2007,2008,2013],
            null,
            undefined,
            {
                Age:24,
                Name:"Uncle Groovey",
                height:"5ft5inch"
            },
            [
                {
                   colour:"red",
                   pet:"dog"
                },
                {
                   artist:"2pac",
                   music:"Rap/hip-hop"
                }
            ]

        ];
In addition to being able to hold a myriad of data types, javaScript arrays have built in functions
we can use to modify the contents of the array the following are some of the common methods that are used
in array manipulation:
                -push() appends an element at the end of the array
                -pop()  removes the last element in the array
                -shift() removes an element in the first index of the array
                -unshift adds an element to the the first index of the array
                -splice() removes elements from an array at specified range, it takes in 2 parameters usually
                but it can take up to 3, the first number is the index where to begin removing and the second number
                is the number of elements to remove from the starting position.Note Splice not only removes those
                elements from the array it also returns a new array of those removed elements.
                -slice() is another array method which is used to copy the contents of an array over a given
                range, it takes 2 parameter numbers, the first number is the starting point and the second
                is the ending point, unlike splice this method copies the array elements over the specified
                range and leaves the initial array untouched , it performs a copy only.

we mentioned that splice() can take up to three parameters? Well, you can use the third parameter, comprised
of one or more element(s), to add to the array. This can be incredibly useful for quickly switching out
an element, or a set of elements, for another.

                    const numbers = [10, 11, 12, 12, 15];
                    const startIndex = 3;
                    const amountToDelete = 1;

                    numbers.splice(startIndex, amountToDelete, 13, 14);
                    // the second entry of 12 is removed, and we add 13 and 14 at the same index
                    console.log(numbers);
                    // returns [ 10, 11, 12, 13, 14, 15 ]

The following is an example of working with the slice() method
                    let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];

                    let todaysWeather = weatherConditions.slice(1, 3);
                    // todaysWeather equals ['snow', 'sleet'];
                    // weatherConditions still equals ['rain', 'snow', 'sleet', 'hail', 'clear']

