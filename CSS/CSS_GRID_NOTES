INTRODUCTION TO CSS GRID
CSS grid helps you to easily build complex web designs. IT works by turning an HTML element into
a grid container with rows and columns , were you can place your child elements wherever you want
within the container.

CREATING YOUR FIRST CSS GRID
To create your first css grid your you need to add the "display: grid" CSS property.Which means the
HTML element you wish you convert into a grid container should have the CSS "display:grid" style of
format.

ADD COLUMNS WITH GRID-TEMPLATE-COLUMNS
Simply adding the "display:grid" CSS property to an HTML element wont change anything that much.Y
You need to define the structure of the grid as well. We do so by enlisting the help of another CSS
property called "grid-template-columns".

This property works by adding columns to the grid container. Each parameter value of the property
represents a column and the actual number is the width of that column.The following is syntax for
defining a grid container with 3 columns. Note each column has been set to 100px width, each of the
100px represents a column.
    <style>
        .container{
            display:grid;
            grid-template-columns:100px 100px 100px;
        }
In addition to the grid-template-columns we also has the "grid-template-rows" which is used to define
the structure in a series of rows , like its counter part each property value represents a column and its
width.
GRID UNITS OF MEASURE
CSS grid provides us with units of measure we can use to adjust the sizes of the columns and rows.
They use either absolute or relative measures of unit.There following are measures of unit used in
modification of the column and row sizes:
    1.fr: sets the column or with to the fraction of the available space.
    2.auto: sets the column or row to fit the size of its content automatically.
    3.%: sets the column or row to a percent width of its container.

 The following is an example of creating a column 5 columns each with its specified size:

    grid-template-columns: auto 1fr 2fr 50px 50% auto;

-auto represents the first column and that column's size will be set to fit its content automatically
-1fr sets the second column to the specified fraction of the available space
-2fr sets the second column to the specified fraction of the available space
-50px sets the third column to a size of 50 pixels.
-50% sets the fourth column to 50 percent width of its container.
-auto sets the fifth column to automatically fit its content that its wrapped around.

GRID-ROW-GAP AND GRID-COLUMN-GAP PROPERTIES

we can create a space in between our columns through the use of the column-gap property, it uses px as
the measure of unit, the same applies for column-row when adding a gap.

We can also use the "grid-gap" which is a shorthand format for specifying grid-column-gap and grid-column-row.
By default if "grid-gap" has only one parameter value, then that value will represent the space created
in between the rows and columns. If the grid-gap property has two parameters the first one represents the
row spacing and the second the column spacing.

WORKING WITH GRID-COLUMN and GRID-ROW PROPERTIES
So far we have been working with the grid containers only and not with the items themselves.
"grid-column" is a CSS property that provides us with the ability to control the amount of columns an
item will consume. The grid consists of vertical and horizontal lines each numbered from the top left
hand corner of the grid, counting horizontally and vertically, these lines we use them to control the
line spacing between the columns."grid-row" is yer another grid property that allows us to manipulate
the line spacing between our rows , it works just like grid-column except it consumes the rows.

The following is an example of creating a column in a 3X3 grid that takes the last two columns of the
second row .

    grid-column: 2/4;
The following is an example of creating a row in a 3X3 grid that takes the last 2 rows of the grid
container.

    grid-row:2/4;
WORKING WITH JUSTIFY-SELF and ALIGN-SELF PROPERTY
CSS provides us with another grid property used for aligning content of a cell. This property uses 4
parameter values to align the content inside the cell, these parameter values consist of:
    1.stretch: this is the default value of the property and it fills the entire width of the cell.
    2.start:this property value aligns the content to the left of the cell.
    3.center:this property value aligns the content to the center of the cell.
    4.end:this property value aligns the content to the right of the cell.
Just as you can align an item horizontally, there's a way to align an item vertically as well. To do this, you use the align-self property
on an item. This property accepts all of the same values as justify-self from the last challenge.

WORKING WITH THE JUSTIFY-ITEMS and ALIGN-ITEMS PROPERTY

Sometimes we need all the grid items to be uniformly aligned in a horizontal manner, one such property that can provide us with this capability
is the "justify-self" property it uses the same property values as the "justify-self" and "align-self" properties.
When we need all the grid items to be uniformly aligned in a vertical manner we
enlist the help of another property called "align-self",this property uses the same property
values as "justify-self" property and "align-self" property.

DIVIDING A GRID INTO A TEMPLATE AREA
CSS provides us with a property we can use to group our cells into a single area with a custom name.
This property is called the "grid-template-areas". The following is a example of using the property:

    grid-template-areas:
      "header header header"
      "advert content content"
      "footer footer footer";
Each word in the above syntax represents a cell and every pair of quotation represents a row.
The above syntax groups all the cells into a single row template area with a custom name of header.
The last row also groups the cells into a single template area with the custom name of footer.
The middle row is divided into 2 template are one for advert and one for content.In addition to
custom labels, you can use a period (.) to designate an empty cell in the grid.

After creating your template area, you will now use the "grid-area" property to add a item to the
custom area. Remember the "grid-template-areas" property goes inside your grid containers' styling
properties. So to add an item to your template-area's custom area, you will need to put "grid-area"
property inside your item's styling properties and give it the name of the custom area where you'd
like the item to be applied.

We can use the grid-area property without having to define our grid-template-area property. what happens
is that the grid-area property will create the template area on the fly.
The following is short hand notation of grid-area creating a template on the fly inside an item.

    .box1{
        grid-area: 1/1/2/4
    }
The numbers used in the above notation each represents the line margins of the grid container.

        grid-area: horizontal_line_to_start_At/vertical_line_to_start_At/
                    horizontal_line_to_end_At/vertical_line_to_end_At

So the above will join cells horizontally starting a line 1 to line 2 and then join cells
vertically starting a line 1 to line 4

WORKING WITH THE REPEAT FUNCTION
There are times when you want to replicate the columns or rows of your grid container, for
example say you need a grid with a 100 rows of the same height, its not very practical to insert
100 values individually. So we use the "repeat" function to help us with adding replication or
removing repetition.

Here's an example that would create the 100 row grid, each row at 50px tall:

    grid-template-rows: repeat(100, 50px);
You can also repeat multiple values with the repeat function and insert the function amongst
other values when defining a grid structure. Here's what that looks like:

    grid-template-columns: repeat(2, 1fr 50px) 20px;
This translates to:

    grid-template-columns: 1fr 50px 1fr 50px 20px;

WORKING WITH THE MIN-MAX PROPERTY
The min-max property can be used to set the size limit of the items when the grid container
changes size. It can be used in conjunction with the repeat function.
The following is an example of working with the min-max property:

    grid-template-columns: 100px minmax(90px,250px);

 The syntax above will create two columns the first one will have a width of a 100px, the second
 column should have a minimum width of 90px and a maximum width of 250px.

 CREATE FLEXIBLE LAYOUTS WITH THE AUTO-FILL and AUTO-FIT PROPERTY
The repeat function comes with an option called auto-fill.This allows you to automatically insert as m
any rows or columns of your desired size as possible depending on the size of the container.
You can create flexible layouts when combining auto-fill with min-max, like this:

    grid-template-columns:repeat(auto-fill,minmax(60px,1fr));
When the container changes size, this setup keeps inserting 60px columns and stretching them until
it can insert another one.

Auto-fit works almost identically to auto-fill. The only difference is that when the container's
size exceeds the size of all the items combined, auto-fill keeps inserting empty rows or columns
and pushes your items to the side, while auto-fit collapses those empty rows or columns and
stretches your items to fit the size of the container.

USING MEDIA QUERIES TO CREATE A RESPONSIVE LAYOUT
CSS Grid can be an easy way to make your site more responsive by using media queries to rearrange
grid areas, change dimensions of a grid, and rearrange the placement of items.